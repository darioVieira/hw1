//References: Craig, Meelan & Nathan all aided me.

#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>
#include <errno.h>
#include <unistd.h>
#include <termios.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <stdbool.h>

#define INPUT_STRING_SIZE 80

#include "io.h"
#include "parse.h"
#include "process.h"
#include "shell.h"

char *cwd[PATH_MAX];

int cmd_quit(tok_t arg[]) 
{
  printf("Bye\n");
  exit(0);
  return 1;
}

int cmd_cd(tok_t arg[])
{	
	char *dir=arg[0];
	
	if(chdir((dir[0]=='-')?cwd:dir)<0)
		perror("Unable to change");
	chdir(arg[0]);
	getcwd(cwd,sizeof(cwd));
	/*cdchar* d=arg[0];
	if(d=NULL)
		d=getenv("HOME");//getenv(char*); -searches the environment string pointed to by name and returns associated string
	if(chdir((d[0]=='-')?cwd:d)<0)
		printf("Can't change to the entered directory");
	else
	{
		getcwd(cwd,sizeof(cwd));
	}*/
	return 1;
}

int cmd_help(tok_t arg[]);


/* Command Lookup table */
typedef int cmd_fun_t (tok_t args[]); /* cmd functions take token array and return int */
typedef struct fun_desc 
{
  cmd_fun_t *fun;
  char *cmd;
  char *doc;
} fun_desc_t;

fun_desc_t cmd_table[] = 
{
  {cmd_help, "?", "\tShow this help menu"},
  {cmd_quit, "quit", "\tQuit the command shell"},
  {cmd_cd, "cd", "\tChange the directory"},
};

int cmd_help(tok_t arg[]) 
{
  int i;
  for (i=0; i < (sizeof(cmd_table)/sizeof(fun_desc_t)); i++) 
  {
    printf("%s - %s\n",cmd_table[i].cmd, cmd_table[i].doc);
  }
  return 1;
}

int lookup(char cmd[]) 
{
  int i;
  for (i=0; i < (sizeof(cmd_table)/sizeof(fun_desc_t)); i++) 
  {
    if (cmd && (strcmp(cmd_table[i].cmd, cmd) == 0)) return i;
  }
  return -1;
}

void init_shell()
{
  /* Check if we are running interactively */
  shell_terminal = STDIN_FILENO;

  /** Note that we cannot take control of the terminal if the shell
      is not interactive */
  shell_is_interactive = isatty(shell_terminal);

  if(shell_is_interactive)
  {

    /* force into foreground */
    while(tcgetpgrp (shell_terminal) != (shell_pgid = getpgrp()))
      kill( - shell_pgid, SIGTTIN);

    shell_pgid = getpid();
    /* Put shell in its own process group */
    if(setpgid(shell_pgid, shell_pgid) < 0)
    {
      fprintf(stdout,"Couldn't put the shell in its own process group");
      exit(1);
    }

    /* Take control of the terminal */
    tcsetpgrp(shell_terminal, shell_pgid);
    tcgetattr(shell_terminal, &shell_tmodes);
  }
  /** YOUR CODE HERE */
}

/**
 * Add a process to our process list
 */
void add_process(process* p)
{
  /** YOUR CODE HERE */
}

/**
 * Creates a process given the inputString from stdin
 */
process* create_process(char* inputString)
{
  /** YOUR CODE HERE */
  return NULL;
}



int shell (int argc, char *argv[]) 
{
  char *s = malloc(INPUT_STRING_SIZE+1);			/* user input string */
  tok_t *t;			/* tokens parsed from input */
  int lineNum = 0;
  int fundex = -1;
  pid_t pid = getpid();		/* get current processes PID */
  pid_t ppid = getppid();	/* get parents PID */
  pid_t cpid, tcpid, cpgid;
  
  
  init_shell();
  
  //size_t size;
  getcwd(cwd,sizeof(cwd));//enters the absolute path name into the array pointed to by wd, size is the size of the array wd points to
  
  printf("%s running as PID %d under %d\n",argv[0],pid,ppid);

  lineNum=0;
  fprintf(stdout, "%d: %s $", lineNum, cwd);
  while ((s = freadln(stdin)))
  {
  	lineNum++;
    t = getToks(s); /* break the line into tokens */
    fundex = lookup(t[0]); /* Is first token a shell literal */
    if(fundex >= 0) cmd_table[fundex].fun(&t[1]);
    else 
    {
      fprintf(stdout, "This shell only supports built-ins. Replace this to run programs as commands.\n");
    }
    
    fprintf(stdout, "%d: %s$ ", lineNum,cwd);
  }
  return 0;
}
